#!/usr/bin/env python

import sys
import numpy as np

import rospy

from sensor_msgs.msg import Imu
from geometry_msgs.msg import Vector3, Quaternion
from Adafruit_BNO055 import BNO055
from imu.msg import CalStatus


class ImuReader:

    def __init__(self):

        self.rate = 1
        # calib_path = rospy.get_param("~calib_path")

        # Start is up
        self._bno = BNO055.BNO055(serial_port='/dev/ttyAMA0', rst=4)
        self._bno.set_external_crystal(True)
        if not self._bno.begin(mode=BNO055.OPERATION_MODE_NDOF):
            raise RuntimeError('Failed to initialize BNO055')

        # Run self test
        status, self_test, error = self._bno.get_system_status()
        rospy.loginfo('System status: {0}'.format(status))
        rospy.loginfo('Self test result (0x0F is normal): 0x{0:02X}'.format(self_test))
        if status == 0x01:
            rospy.logerr('System error: {0}'.format(error))

        # Display version information
        sw, bl, accel, mag, gyro = self._bno.get_revision()
        rospy.loginfo('Software version:   {0}'.format(sw))
        rospy.loginfo('Bootloader version: {0}'.format(bl))
        rospy.loginfo('Accelerometer ID:   0x{0:02X}'.format(accel))
        rospy.loginfo('Magnetometer ID:    0x{0:02X}'.format(mag))
        rospy.loginfo('Gyroscope ID:       0x{0:02X}'.format(gyro))

        # self.bno.set_axis_remap(BNO055.AXIS_REMAP_Y, BNO055.AXIS_REMAP_X, BNO055.AXIS_REMAP_Z)

    def read_from_imu(self):
        while True:
            try:
                cal_status_msg = CalStatus()
                cal_status_msg.header.stamp = rospy.Time.now()
                cal_status_msg.header.frame_id = "imu_link"

                imu_msg = Imu()
                imu_msg.header.stamp = cal_status_msg.header.stamp
                imu_msg.header.frame_id = 'imu_link'

                cal_status_msg.sys, cal_status_msg.gyro, cal_status_msg.accel, cal_status_msg.mag = self._bno.get_calibration_status()

                orientation = self._bno.read_quaternion()
                linear_acceleration = self._bno.read_linear_acceleration()
                angular_velocity = self._bno.read_gyroscope()

                imu_msg.orientation_covariance[0] = -1
                imu_msg.linear_acceleration_covariance[0] = -1
                imu_msg.angular_velocity_covariance[0] = -1

                imu_msg.orientation = Quaternion(orientation[1],
                                                 orientation[2],
                                                 orientation[3],
                                                 orientation[0])
                imu_msg.linear_acceleration = Vector3(linear_acceleration[0],
                                                      linear_acceleration[1],
                                                      linear_acceleration[2])
                imu_msg.angular_velocity = Vector3(np.deg2rad(angular_velocity[0]),
                                                   np.deg2rad(angular_velocity[1]),
                                                   np.deg2rad(angular_velocity[2]))

                return cal_status_msg, imu_msg

            except RuntimeError:
                pass

    def read_calibration(self):
        return self._bno.get_calibration()

if __name__ == "__main__":
    try:
        rospy.init_node('imu_controller')

        imu_reader = ImuReader()

        cal_status_pub = rospy.Publisher('imu/cal_status', CalStatus, queue_size=10)

        rate = rospy.Rate(imu_reader.rate)
        while not rospy.is_shutdown():
            cal_status_msg, imu_msg = imu_reader.read_from_imu()
            cal_status_pub.publish(cal_status_msg)
            if cal_status_msg.sys == 3 and cal_status_msg.gyro == 3 and cal_status_msg.accel == 3 and cal_status_msg.mag == 3:
                break

            rospy.loginfo('angular: [{:f}, {:f}, {:f}]'.format(imu_msg.angular_velocity.x, imu_msg.angular_velocity.y, imu_msg.angular_velocity.z))
            rospy.loginfo('sys: {} gyro: {} accel: {} mag: {}'.format(cal_status_msg.sys, cal_status_msg.gyro, cal_status_msg.accel, cal_status_msg.mag))

            rate.sleep()

        imu_cal_data = imu_reader.read_calibration()
        rospy.loginfo('{}'.format(imu_cal_data))

    except RuntimeError as e:
        rospy.logfatal('RuntimeError: {}'.format(e.str()))

    except rospy.ROSInterruptException:
        pass